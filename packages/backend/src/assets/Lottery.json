{
  "address": "0x8A791620dd6260079BF849Dc5567aDC3F2FdC318",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_tokenName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_tokenSymbol",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_purchaseRatio",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_betPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_betFee",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_slots",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "bet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "betFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "betFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "times",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "betMany",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "betPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "betsClosingTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "betsOpen",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "closeLottery",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isLotteryClosed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isOwner",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isPastLotteryClosingTime",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isWinner",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "closingTime",
          "type": "uint256"
        }
      ],
      "name": "openBets",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ownerPool",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ownerWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paymentToken",
      "outputs": [
        {
          "internalType": "contract LotteryToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "prizeAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "prizePool",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "prizeWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "purchaseRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "purchaseTokens",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "returnTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "tokenBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenSymbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "winner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xe2c2ebc488d9cc95d924543aaa2d3e31bf9aab01a74df518c4ea43bc2387ac8f",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x8A791620dd6260079BF849Dc5567aDC3F2FdC318",
    "transactionIndex": 0,
    "gasUsed": "2320565",
    "logsBloom": "0x
    "blockHash": "0xf77dbfb9a17d9718ecd9dc5f54475303ea006d386846f1e99d7cceb06636efff",
    "transactionHash": "0xe2c2ebc488d9cc95d924543aaa2d3e31bf9aab01a74df518c4ea43bc2387ac8f",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 19,
        "transactionHash": "0xe2c2ebc488d9cc95d924543aaa2d3e31bf9aab01a74df518c4ea43bc2387ac8f",
        "address": "0x8A791620dd6260079BF849Dc5567aDC3F2FdC318",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xf77dbfb9a17d9718ecd9dc5f54475303ea006d386846f1e99d7cceb06636efff"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 19,
        "transactionHash": "0xe2c2ebc488d9cc95d924543aaa2d3e31bf9aab01a74df518c4ea43bc2387ac8f",
        "address": "0x8aCd85898458400f7Db866d53FCFF6f0D49741FF",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000008a791620dd6260079bf849dc5567adc3f2fdc318",
          "0x0000000000000000000000008a791620dd6260079bf849dc5567adc3f2fdc318"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0xf77dbfb9a17d9718ecd9dc5f54475303ea006d386846f1e99d7cceb06636efff"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 19,
        "transactionHash": "0xe2c2ebc488d9cc95d924543aaa2d3e31bf9aab01a74df518c4ea43bc2387ac8f",
        "address": "0x8aCd85898458400f7Db866d53FCFF6f0D49741FF",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6",
          "0x0000000000000000000000008a791620dd6260079bf849dc5567adc3f2fdc318",
          "0x0000000000000000000000008a791620dd6260079bf849dc5567adc3f2fdc318"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0xf77dbfb9a17d9718ecd9dc5f54475303ea006d386846f1e99d7cceb06636efff"
      }
    ],
    "blockNumber": 19,
    "cumulativeGasUsed": "2320565",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "LotteryToken",
    "LTO",
    "100000000000000000000",
    "1000000000000000000",
    "200000000000000000"
  ],
  "numDeployments": 10,
  "solcInputHash": "bf9bbe3f892b062f7cc49c02160b801f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_tokenName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_tokenSymbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_purchaseRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_betPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_betFee\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_slots\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"bet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"betFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"betFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"times\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"betMany\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"betPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"betsClosingTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"betsOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"closeLottery\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isLotteryClosed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPastLotteryClosingTime\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isWinner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"closingTime\",\"type\":\"uint256\"}],\"name\":\"openBets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ownerPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ownerWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paymentToken\",\"outputs\":[{\"internalType\":\"contract LotteryToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"prizeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"prizePool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"prizeWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"purchaseRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"purchaseTokens\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"returnTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"tokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenSymbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"winner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"custom:teaching\":\"This is a contract meant for teaching only\",\"details\":\"This contract implements a relatively weak randomness source, since there is no cliff period between the randao reveal and the actual usage in this contract\",\"kind\":\"dev\",\"methods\":{\"closeLottery()\":{\"details\":\"Anyone can call this function at any time after the closing time\"},\"constructor\":{\"params\":{\"_betFee\":\"Amount of tokens required for placing a bet that goes for the owner pool\",\"_betPrice\":\"Amount of tokens required for placing a bet that goes for the prize pool\",\"_purchaseRatio\":\"Amount of tokens given per ETH paid\",\"_tokenName\":\"Name of the token used for payment\",\"_tokenSymbol\":\"Symbol of the token used for payment\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"purchaseTokens()\":{\"details\":\"This implementation is prone to rounding problems\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"A very simple lottery contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"bet(address)\":{\"notice\":\"Charges the bet price and creates a new bet slot with the sender's address\"},\"betFee()\":{\"notice\":\"Amount of tokens required for placing a bet that goes for the owner pool\"},\"betMany(uint256,address)\":{\"notice\":\"Calls the bet function `times` times\"},\"betPrice()\":{\"notice\":\"Amount of tokens required for placing a bet that goes for the prize pool\"},\"closeLottery()\":{\"notice\":\"Closes the lottery and calculates the prize, if any\"},\"constructor\":{\"notice\":\"Constructor function\"},\"openBets(uint256)\":{\"notice\":\"Opens the lottery for receiving bets\"},\"ownerWithdraw(uint256)\":{\"notice\":\"Withdraws `amount` from the owner's pool\"},\"paymentToken()\":{\"notice\":\"Address of the token used as payment for the bets\"},\"prizeWithdraw(uint256,address)\":{\"notice\":\"Withdraws `amount` from that accounts's prize pool\"},\"purchaseRatio()\":{\"notice\":\"Amount of tokens given per ETH paid\"},\"purchaseTokens()\":{\"notice\":\"Gives tokens based on the amount of ETH sent and the purchase ratio\"},\"returnTokens(uint256,address)\":{\"notice\":\"Burns `amount` tokens and give the equivalent ETH back to user\"}},\"notice\":\"You can use this contract for running a very simple lottery\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Lottery.sol\":\"Lottery\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0dd6e52cb394d7f5abe5dca2d4908a6be40417914720932de757de34a99ab87f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\",\"keccak256\":\"0xa56ca923f70c1748830700250b19c61b70db9a683516dc5e216694a50445d99c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20Burnable is Context, ERC20 {\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        _spendAllowance(account, _msgSender(), amount);\\n        _burn(account, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x0d19410453cda55960a818e02bd7c18952a5c8fe7a3036e81f0d599f34487a7b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/Lottery.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {LotteryToken} from \\\"./LotteryToken.sol\\\";\\n\\n/// @title A very simple lottery contract\\n/// @notice You can use this contract for running a very simple lottery\\n/// @dev This contract implements a relatively weak randomness source, since there is no cliff period between the randao reveal and the actual usage in this contract\\n/// @custom:teaching This is a contract meant for teaching only\\ncontract Lottery is Ownable {\\n    /// @notice Address of the token used as payment for the bets\\n    LotteryToken public paymentToken;\\n    /// @notice Amount of tokens given per ETH paid\\n    uint256 public purchaseRatio;\\n    /// @notice Amount of tokens required for placing a bet that goes for the prize pool\\n    uint256 public betPrice;\\n    /// @notice Amount of tokens required for placing a bet that goes for the owner pool\\n    uint256 public betFee;\\n    bool public betsOpen;\\n    uint256 public prizePool;\\n    uint256 public betsClosingTime;\\n    address[] public _slots; \\n    uint256 public betFees;\\n    address public winner;\\n    mapping(address => uint256)  public prizeAmount;\\n    uint256 public ownerPool;\\n\\n     /// @notice Passes when the lottery is at closed state\\n    modifier whenBetsClosed() {\\n        require(!betsOpen, \\\"Lottery is open\\\");\\n        _;\\n    }\\n\\n    /// @notice Passes when the lottery is at open state and the current block timestamp is lower than the lottery closing date\\n    modifier whenBetsOpen() {\\n        require(\\n            betsOpen && block.timestamp < betsClosingTime,\\n            \\\"Lottery is closed\\\"\\n        );\\n        _;\\n    }\\n\\n    /// @notice Constructor function\\n    /// @param _tokenName Name of the token used for payment\\n    /// @param _tokenSymbol Symbol of the token used for payment\\n    /// @param _purchaseRatio Amount of tokens given per ETH paid\\n    /// @param _betPrice Amount of tokens required for placing a bet that goes for the prize pool\\n    /// @param _betFee Amount of tokens required for placing a bet that goes for the owner pool\\n    constructor(\\n        string memory _tokenName,\\n        string memory _tokenSymbol,\\n        uint256 _purchaseRatio,\\n        uint256 _betPrice,\\n        uint256 _betFee\\n    ) Ownable() {\\n        paymentToken = new LotteryToken(_tokenName, _tokenSymbol);\\n        purchaseRatio = _purchaseRatio;\\n        betPrice = _betPrice;\\n        betFee = _betFee;\\n    }\\n\\n   function isOwner(address account) external view returns(bool) {\\n         return account == owner() ;\\n   }\\n\\n    function isWinner(address account) external view returns(bool) {\\n         return !betsOpen &&  account == winner;\\n   }\\n\\n   \\n   function isLotteryClosed() external view returns(bool) {\\n         return !betsOpen;\\n   }\\n \\n   function isPastLotteryClosingTime() external view returns(bool) {\\n         return _isPastClosingTime();\\n   }\\n\\n    function _isPastClosingTime() private view returns(bool) {\\n         return block.timestamp >= betsClosingTime;\\n   }\\n\\n    function tokenBalance(address account) external view returns(uint256) {\\n         return  paymentToken.balanceOf(account);\\n   }\\n\\n    function tokenSymbol() external view returns(string memory) {\\n         return  paymentToken.symbol();\\n   }\\n\\n    /// @notice Opens the lottery for receiving bets\\n    function openBets(uint256 closingTime) external onlyOwner whenBetsClosed {\\n        require(\\n            closingTime > block.timestamp,\\n            \\\"Closing time must be in the future\\\"\\n        );\\n        betsClosingTime = closingTime;\\n        betsOpen = true;\\n        winner = address(0);\\n    }\\n\\n    /// @notice Gives tokens based on the amount of ETH sent and the purchase ratio\\n    /// @dev This implementation is prone to rounding problems\\n    function purchaseTokens() external payable {\\n        // TODO\\n        uint256 tokens = ethToTokens(msg.value);\\n        paymentToken.mint(msg.sender, tokens);\\n    }\\n\\n    /// @notice Charges the bet price and creates a new bet slot with the sender's address\\n    function bet(address sender) public {\\n        // TODO\\n      _betMany(1, sender);\\n    }\\n\\n    function ethToTokens(uint256 eth) private view returns (uint256){\\n          return eth * purchaseRatio;\\n    }\\n\\n   function _betMany(uint256 times, address sender) private {\\n        require(times > 0);\\n        uint256 requiredTokens = times * (betPrice + betFee);\\n        uint256 availableTokens = paymentToken.balanceOf(sender);\\n        require(availableTokens >= requiredTokens, \\\"You do not have enough tokens\\\");\\n        while (times > 0) {\\n            _slots.push(sender);\\n            times--;\\n        }\\n       prizePool += betPrice * times;\\n       ownerPool += betFee * times;\\n       paymentToken.transferFrom(sender,  address(this), requiredTokens);\\n    }\\n\\n    /// @notice Calls the bet function `times` times\\n    function betMany(uint256 times, address sender) external {\\n       _betMany(times, sender);\\n     }\\n\\n    /// @notice Closes the lottery and calculates the prize, if any\\n    /// @dev Anyone can call this function at any time after the closing time\\n    function closeLottery() external {\\n        // TODO\\n        require(_isPastClosingTime() , \\\"Lottery still active\\\");\\n        require(betsOpen, \\\"already closed\\\");\\n        if (_slots.length > 0) {\\n            uint256 winnerIndex = getRandomNumber() % _slots.length;\\n            winner = _slots[winnerIndex];\\n            prizeAmount[winner] += prizePool;\\n            prizePool = 0;\\n            delete (_slots);\\n        }\\n        betsOpen = false;\\n    }\\n\\n    /// @notice Returns a random number calculated from the previous block randao\\n    /// @dev This only works after The Merge\\n    function getRandomNumber() internal view returns(uint256) {\\n        return block.prevrandao;\\n    }\\n\\n    /// @notice Withdraws `amount` from that accounts's prize pool\\n    function prizeWithdraw(uint256 amount, address sender) external {\\n        // TODO\\n        require(amount < prizeAmount[sender], \\\"Do not have enough prize tokens\\\" );\\n       prizeAmount[sender] -= amount; \\n       paymentToken.transfer(sender, amount);       \\n    }\\n\\n    /// @notice Withdraws `amount` from the owner's pool\\n    function ownerWithdraw(uint256 amount) external onlyOwner {\\n        // TODO\\n          require(amount <= ownerPool, \\\"Not enough fees collected\\\");\\n        ownerPool -= amount;\\n           uint256 eth = tokensToEth(amount);\\n      (bool ok,) =  payable(msg.sender).call{value: eth}(\\\"\\\");\\n      require(ok, \\\"failed to send eth\\\");\\n    }\\n    \\n    function tokensToEth(uint256 amount) private view returns(uint256){\\n       return amount / purchaseRatio;\\n    }\\n\\n    /// @notice Burns `amount` tokens and give the equivalent ETH back to user\\n    function returnTokens(uint256 amount, address sender) external {\\n        // TODO\\n        paymentToken.burnFrom(sender, amount);\\n        uint256 eth = tokensToEth(amount);\\n      (bool ok,) =  payable(sender).call{value: eth}(\\\"\\\");\\n      require(ok, \\\"failed to send eth\\\");\\n    }\\n}\",\"keccak256\":\"0x2c4ad000affbd7d00f582f6f85b231d28f623a6d16113e81e5baa83e50c83fb4\",\"license\":\"MIT\"},\"contracts/LotteryToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\n\\ncontract LotteryToken is ERC20, ERC20Burnable, AccessControl {\\n    bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\n\\n    constructor(string memory name, string memory symbol) ERC20(name, symbol) {\\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _grantRole(MINTER_ROLE, msg.sender);\\n    }\\n\\n    function mint(address to, uint256 amount) public onlyRole(MINTER_ROLE) {\\n        _mint(to, amount);\\n    }\\n}\",\"keccak256\":\"0x905e9d52768a5f88dd76a2c03573c32179079f5ccd01f911a8d8c25b32adc3b5\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162002ad038038062002ad08339810160408190526200003491620001da565b6200003f33620000af565b84846040516200004f90620000ff565b6200005c9291906200028d565b604051809103906000f08015801562000079573d6000803e3d6000fd5b50600180546001600160a01b0319166001600160a01b039290921691909117905560029290925560035560045550620002bf9050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b611568806200156883390190565b634e487b7160e01b600052604160045260246000fd5b60005b838110156200014057818101518382015260200162000126565b50506000910152565b600082601f8301126200015b57600080fd5b81516001600160401b03808211156200017857620001786200010d565b604051601f8301601f19908116603f01168101908282118183101715620001a357620001a36200010d565b81604052838152866020858801011115620001bd57600080fd5b620001d084602083016020890162000123565b9695505050505050565b600080600080600060a08688031215620001f357600080fd5b85516001600160401b03808211156200020b57600080fd5b6200021989838a0162000149565b965060208801519150808211156200023057600080fd5b506200023f8882890162000149565b60408801516060890151608090990151979a919950979695509350505050565b600081518084526200027981602086016020860162000123565b601f01601f19169290920160200192915050565b604081526000620002a260408301856200025f565b8281036020840152620002b681856200025f565b95945050505050565b61129980620002cf6000396000f3fe6080604052600436106101c15760003560e01c8063719ce73e116100f7578063b7e1eced11610095578063d1b258ff11610064578063d1b258ff146104b9578063dfbf53ae146104d3578063eedc966a146104f3578063f2fde38b1461051357600080fd5b8063b7e1eced14610454578063b8af21b91461046a578063cfd8a17514610483578063d0619dd41461049957600080fd5b80638da5cb5b116100d15780638da5cb5b146103e057806395cadc47146103fe578063990a49f5146104145780639d9ca28d1461043457600080fd5b8063719ce73e146103925780637b61c320146103a8578063841e6ce9146103ca57600080fd5b80632f54bf6e1161016457806333f707d11161013e57806333f707d1146103285780636687376e146103485780636fd0981614610368578063715018a61461037d57600080fd5b80632f54bf6e146102d15780633013ce29146103005780633290ce291461032057600080fd5b80631a1b72d2116101a05780631a1b72d21461023657806324b057541461025657806325f76f171461028e5780632b65e040146102bb57600080fd5b8062ec8fe7146101c65780630474a68e146101f057806318c3496514610212575b600080fd5b3480156101d257600080fd5b506101db610533565b60405190151581526020015b60405180910390f35b3480156101fc57600080fd5b5061021061020b366004610fe9565b610546565b005b34801561021e57600080fd5b5061022860075481565b6040519081526020016101e7565b34801561024257600080fd5b5061021061025136600461100b565b610554565b34801561026257600080fd5b50610276610271366004611037565b61066a565b6040516001600160a01b0390911681526020016101e7565b34801561029a57600080fd5b506102286102a9366004610fe9565b600b6020526000908152604090205481565b3480156102c757600080fd5b50610228600c5481565b3480156102dd57600080fd5b506101db6102ec366004610fe9565b6000546001600160a01b0391821691161490565b34801561030c57600080fd5b50600154610276906001600160a01b031681565b610210610694565b34801561033457600080fd5b50610210610343366004611037565b610707565b34801561035457600080fd5b5061021061036336600461100b565b610819565b34801561037457600080fd5b50610210610827565b34801561038957600080fd5b50610210610952565b34801561039e57600080fd5b5061022860065481565b3480156103b457600080fd5b506103bd610966565b6040516101e79190611074565b3480156103d657600080fd5b5061022860045481565b3480156103ec57600080fd5b506000546001600160a01b0316610276565b34801561040a57600080fd5b5061022860025481565b34801561042057600080fd5b5061021061042f366004611037565b6109d8565b34801561044057600080fd5b506101db61044f366004610fe9565b610aa1565b34801561046057600080fd5b5061022860095481565b34801561047657600080fd5b5060055460ff16156101db565b34801561048f57600080fd5b5061022860035481565b3480156104a557600080fd5b506102106104b436600461100b565b610aca565b3480156104c557600080fd5b506005546101db9060ff1681565b3480156104df57600080fd5b50600a54610276906001600160a01b031681565b3480156104ff57600080fd5b5061022861050e366004610fe9565b610bd5565b34801561051f57600080fd5b5061021061052e366004610fe9565b610c44565b600061054160075442101590565b905090565b610551600182610cba565b50565b60015460405163079cc67960e41b81526001600160a01b03838116600483015260248201859052909116906379cc679090604401600060405180830381600087803b1580156105a257600080fd5b505af11580156105b6573d6000803e3d6000fd5b5050505060006105c583610ed1565b90506000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114610614576040519150601f19603f3d011682016040523d82523d6000602084013e610619565b606091505b50509050806106645760405162461bcd60e51b81526020600482015260126024820152710ccc2d2d8cac840e8de40e6cadcc840cae8d60731b60448201526064015b60405180910390fd5b50505050565b6008818154811061067a57600080fd5b6000918252602090912001546001600160a01b0316905081565b600061069f34610ee1565b6001546040516340c10f1960e01b8152336004820152602481018390529192506001600160a01b0316906340c10f1990604401600060405180830381600087803b1580156106ec57600080fd5b505af1158015610700573d6000803e3d6000fd5b5050505050565b61070f610ef1565b600c548111156107615760405162461bcd60e51b815260206004820152601960248201527f4e6f7420656e6f756768206665657320636f6c6c656374656400000000000000604482015260640161065b565b80600c600082825461077391906110bd565b909155506000905061078482610ed1565b604051909150600090339083908381818185875af1925050503d80600081146107c9576040519150601f19603f3d011682016040523d82523d6000602084013e6107ce565b606091505b50509050806108145760405162461bcd60e51b81526020600482015260126024820152710ccc2d2d8cac840e8de40e6cadcc840cae8d60731b604482015260640161065b565b505050565b6108238282610cba565b5050565b6007544210156108705760405162461bcd60e51b81526020600482015260146024820152734c6f7474657279207374696c6c2061637469766560601b604482015260640161065b565b60055460ff166108b35760405162461bcd60e51b815260206004820152600e60248201526d185b1c9958591e4818db1bdcd95960921b604482015260640161065b565b60085415610946576008546000906108cb90446110e6565b9050600881815481106108e0576108e06110fa565b6000918252602080832090910154600a80546001600160a01b0319166001600160a01b039092169182179055600654908352600b9091526040822080549192909161092c908490611110565b90915550506000600681905561094490600890610f9b565b505b6005805460ff19169055565b61095a610ef1565b6109646000610f4b565b565b600154604080516395d89b4160e01b815290516060926001600160a01b0316916395d89b419160048083019260009291908290030181865afa1580156109b0573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526105419190810190611139565b6109e0610ef1565b60055460ff1615610a255760405162461bcd60e51b815260206004820152600f60248201526e2637ba3a32b93c9034b99037b832b760891b604482015260640161065b565b428111610a7f5760405162461bcd60e51b815260206004820152602260248201527f436c6f73696e672074696d65206d75737420626520696e207468652066757475604482015261726560f01b606482015260840161065b565b6007556005805460ff19166001179055600a80546001600160a01b0319169055565b60055460009060ff16158015610ac45750600a546001600160a01b038381169116145b92915050565b6001600160a01b0381166000908152600b60205260409020548210610b315760405162461bcd60e51b815260206004820152601f60248201527f446f206e6f74206861766520656e6f756768207072697a6520746f6b656e7300604482015260640161065b565b6001600160a01b0381166000908152600b602052604081208054849290610b599084906110bd565b909155505060015460405163a9059cbb60e01b81526001600160a01b038381166004830152602482018590529091169063a9059cbb906044016020604051808303816000875af1158015610bb1573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061081491906111e6565b6001546040516370a0823160e01b81526001600160a01b03838116600483015260009216906370a0823190602401602060405180830381865afa158015610c20573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ac49190611208565b610c4c610ef1565b6001600160a01b038116610cb15760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161065b565b61055181610f4b565b60008211610cc757600080fd5b6000600454600354610cd99190611110565b610ce39084611221565b6001546040516370a0823160e01b81526001600160a01b038581166004830152929350600092909116906370a0823190602401602060405180830381865afa158015610d33573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d579190611208565b905081811015610da95760405162461bcd60e51b815260206004820152601d60248201527f596f7520646f206e6f74206861766520656e6f75676820746f6b656e73000000604482015260640161065b565b8315610e0c57600880546001810182556000919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30180546001600160a01b0319166001600160a01b03851617905583610e0481611238565b945050610da9565b83600354610e1a9190611221565b60066000828254610e2b9190611110565b9091555050600454610e3e908590611221565b600c6000828254610e4f9190611110565b90915550506001546040516323b872dd60e01b81526001600160a01b03858116600483015230602483015260448201859052909116906323b872dd906064016020604051808303816000875af1158015610ead573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061070091906111e6565b600060025482610ac4919061124f565b600060025482610ac49190611221565b6000546001600160a01b031633146109645760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161065b565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b508054600082559060005260206000209081019061055191905b80821115610fc95760008155600101610fb5565b5090565b80356001600160a01b0381168114610fe457600080fd5b919050565b600060208284031215610ffb57600080fd5b61100482610fcd565b9392505050565b6000806040838503121561101e57600080fd5b8235915061102e60208401610fcd565b90509250929050565b60006020828403121561104957600080fd5b5035919050565b60005b8381101561106b578181015183820152602001611053565b50506000910152565b6020815260008251806020840152611093816040850160208701611050565b601f01601f19169190910160400192915050565b634e487b7160e01b600052601160045260246000fd5b81810381811115610ac457610ac46110a7565b634e487b7160e01b600052601260045260246000fd5b6000826110f5576110f56110d0565b500690565b634e487b7160e01b600052603260045260246000fd5b80820180821115610ac457610ac46110a7565b634e487b7160e01b600052604160045260246000fd5b60006020828403121561114b57600080fd5b815167ffffffffffffffff8082111561116357600080fd5b818401915084601f83011261117757600080fd5b81518181111561118957611189611123565b604051601f8201601f19908116603f011681019083821181831017156111b1576111b1611123565b816040528281528760208487010111156111ca57600080fd5b6111db836020830160208801611050565b979650505050505050565b6000602082840312156111f857600080fd5b8151801515811461100457600080fd5b60006020828403121561121a57600080fd5b5051919050565b8082028115828204841417610ac457610ac46110a7565b600081611247576112476110a7565b506000190190565b60008261125e5761125e6110d0565b50049056fea2646970667358221220410077554b9b065585edd20a96bb7691a7bfa9a652075678a301322057b7896f64736f6c6343000818003360806040523480156200001157600080fd5b506040516200156838038062001568833981016040819052620000349162000206565b8181600362000044838262000301565b50600462000053828262000301565b50620000659150600090503362000099565b620000917f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a63362000099565b5050620003cd565b60008281526005602090815260408083206001600160a01b038516845290915290205460ff166200013a5760008281526005602090815260408083206001600160a01b03851684529091529020805460ff19166001179055620000f93390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200016657600080fd5b81516001600160401b03808211156200018357620001836200013e565b604051601f8301601f19908116603f01168101908282118183101715620001ae57620001ae6200013e565b8160405283815260209250866020858801011115620001cc57600080fd5b600091505b83821015620001f05785820183015181830184015290820190620001d1565b6000602085830101528094505050505092915050565b600080604083850312156200021a57600080fd5b82516001600160401b03808211156200023257600080fd5b620002408683870162000154565b935060208501519150808211156200025757600080fd5b50620002668582860162000154565b9150509250929050565b600181811c908216806200028557607f821691505b602082108103620002a657634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620002fc576000816000526020600020601f850160051c81016020861015620002d75750805b601f850160051c820191505b81811015620002f857828155600101620002e3565b5050505b505050565b81516001600160401b038111156200031d576200031d6200013e565b62000335816200032e845462000270565b84620002ac565b602080601f8311600181146200036d5760008415620003545750858301515b600019600386901b1c1916600185901b178555620002f8565b600085815260208120601f198616915b828110156200039e578886015182559484019460019091019084016200037d565b5085821015620003bd5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b61118b80620003dd6000396000f3fe608060405234801561001057600080fd5b50600436106101425760003560e01c806342966c68116100b8578063a217fddf1161007c578063a217fddf146102a6578063a457c2d7146102ae578063a9059cbb146102c1578063d5391393146102d4578063d547741f146102fb578063dd62ed3e1461030e57600080fd5b806342966c681461023c57806370a082311461024f57806379cc67901461027857806391d148541461028b57806395d89b411461029e57600080fd5b8063248a9ca31161010a578063248a9ca3146101bc5780632f2ff15d146101df578063313ce567146101f457806336568abe14610203578063395093511461021657806340c10f191461022957600080fd5b806301ffc9a71461014757806306fdde031461016f578063095ea7b31461018457806318160ddd1461019757806323b872dd146101a9575b600080fd5b61015a610155366004610e96565b610321565b60405190151581526020015b60405180910390f35b610177610358565b6040516101669190610ee4565b61015a610192366004610f33565b6103ea565b6002545b604051908152602001610166565b61015a6101b7366004610f5d565b610402565b61019b6101ca366004610f99565b60009081526005602052604090206001015490565b6101f26101ed366004610fb2565b610426565b005b60405160128152602001610166565b6101f2610211366004610fb2565b610450565b61015a610224366004610f33565b6104d3565b6101f2610237366004610f33565b6104f5565b6101f261024a366004610f99565b610529565b61019b61025d366004610fde565b6001600160a01b031660009081526020819052604090205490565b6101f2610286366004610f33565b610536565b61015a610299366004610fb2565b61054b565b610177610576565b61019b600081565b61015a6102bc366004610f33565b610585565b61015a6102cf366004610f33565b610600565b61019b7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a681565b6101f2610309366004610fb2565b61060e565b61019b61031c366004610ff9565b610633565b60006001600160e01b03198216637965db0b60e01b148061035257506301ffc9a760e01b6001600160e01b03198316145b92915050565b60606003805461036790611023565b80601f016020809104026020016040519081016040528092919081815260200182805461039390611023565b80156103e05780601f106103b5576101008083540402835291602001916103e0565b820191906000526020600020905b8154815290600101906020018083116103c357829003601f168201915b5050505050905090565b6000336103f881858561065e565b5060019392505050565b600033610410858285610782565b61041b8585856107fc565b506001949350505050565b600082815260056020526040902060010154610441816109a0565b61044b83836109aa565b505050565b6001600160a01b03811633146104c55760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b6104cf8282610a30565b5050565b6000336103f88185856104e68383610633565b6104f09190611073565b61065e565b7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a661051f816109a0565b61044b8383610a97565b6105333382610b56565b50565b610541823383610782565b6104cf8282610b56565b60009182526005602090815260408084206001600160a01b0393909316845291905290205460ff1690565b60606004805461036790611023565b600033816105938286610633565b9050838110156105f35760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084016104bc565b61041b828686840361065e565b6000336103f88185856107fc565b600082815260056020526040902060010154610629816109a0565b61044b8383610a30565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6001600160a01b0383166106c05760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016104bc565b6001600160a01b0382166107215760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016104bc565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b600061078e8484610633565b905060001981146107f657818110156107e95760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e636500000060448201526064016104bc565b6107f6848484840361065e565b50505050565b6001600160a01b0383166108605760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b60648201526084016104bc565b6001600160a01b0382166108c25760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b60648201526084016104bc565b6001600160a01b0383166000908152602081905260409020548181101561093a5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b60648201526084016104bc565b6001600160a01b03848116600081815260208181526040808320878703905593871680835291849020805487019055925185815290927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a36107f6565b6105338133610c88565b6109b4828261054b565b6104cf5760008281526005602090815260408083206001600160a01b03851684529091529020805460ff191660011790556109ec3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b610a3a828261054b565b156104cf5760008281526005602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6001600160a01b038216610aed5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f20616464726573730060448201526064016104bc565b8060026000828254610aff9190611073565b90915550506001600160a01b038216600081815260208181526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a35050565b6001600160a01b038216610bb65760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b60648201526084016104bc565b6001600160a01b03821660009081526020819052604090205481811015610c2a5760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b60648201526084016104bc565b6001600160a01b0383166000818152602081815260408083208686039055600280548790039055518581529192917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a3505050565b610c92828261054b565b6104cf57610c9f81610ce1565b610caa836020610cf3565b604051602001610cbb929190611086565b60408051601f198184030181529082905262461bcd60e51b82526104bc91600401610ee4565b60606103526001600160a01b03831660145b60606000610d028360026110fb565b610d0d906002611073565b67ffffffffffffffff811115610d2557610d25611112565b6040519080825280601f01601f191660200182016040528015610d4f576020820181803683370190505b509050600360fc1b81600081518110610d6a57610d6a611128565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110610d9957610d99611128565b60200101906001600160f81b031916908160001a9053506000610dbd8460026110fb565b610dc8906001611073565b90505b6001811115610e40576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110610dfc57610dfc611128565b1a60f81b828281518110610e1257610e12611128565b60200101906001600160f81b031916908160001a90535060049490941c93610e398161113e565b9050610dcb565b508315610e8f5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016104bc565b9392505050565b600060208284031215610ea857600080fd5b81356001600160e01b031981168114610e8f57600080fd5b60005b83811015610edb578181015183820152602001610ec3565b50506000910152565b6020815260008251806020840152610f03816040850160208701610ec0565b601f01601f19169190910160400192915050565b80356001600160a01b0381168114610f2e57600080fd5b919050565b60008060408385031215610f4657600080fd5b610f4f83610f17565b946020939093013593505050565b600080600060608486031215610f7257600080fd5b610f7b84610f17565b9250610f8960208501610f17565b9150604084013590509250925092565b600060208284031215610fab57600080fd5b5035919050565b60008060408385031215610fc557600080fd5b82359150610fd560208401610f17565b90509250929050565b600060208284031215610ff057600080fd5b610e8f82610f17565b6000806040838503121561100c57600080fd5b61101583610f17565b9150610fd560208401610f17565b600181811c9082168061103757607f821691505b60208210810361105757634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b808201808211156103525761035261105d565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516110be816017850160208801610ec0565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516110ef816028840160208801610ec0565b01602801949350505050565b80820281158282048414176103525761035261105d565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b60008161114d5761114d61105d565b50600019019056fea2646970667358221220123c7aa90da86ef8958deca2d24e3b1fc2a6dc39c29f6576be2974177805cb6764736f6c63430008180033",
  "deployedBytecode": "0x6080604052600436106101c15760003560e01c8063719ce73e116100f7578063b7e1eced11610095578063d1b258ff11610064578063d1b258ff146104b9578063dfbf53ae146104d3578063eedc966a146104f3578063f2fde38b1461051357600080fd5b8063b7e1eced14610454578063b8af21b91461046a578063cfd8a17514610483578063d0619dd41461049957600080fd5b80638da5cb5b116100d15780638da5cb5b146103e057806395cadc47146103fe578063990a49f5146104145780639d9ca28d1461043457600080fd5b8063719ce73e146103925780637b61c320146103a8578063841e6ce9146103ca57600080fd5b80632f54bf6e1161016457806333f707d11161013e57806333f707d1146103285780636687376e146103485780636fd0981614610368578063715018a61461037d57600080fd5b80632f54bf6e146102d15780633013ce29146103005780633290ce291461032057600080fd5b80631a1b72d2116101a05780631a1b72d21461023657806324b057541461025657806325f76f171461028e5780632b65e040146102bb57600080fd5b8062ec8fe7146101c65780630474a68e146101f057806318c3496514610212575b600080fd5b3480156101d257600080fd5b506101db610533565b60405190151581526020015b60405180910390f35b3480156101fc57600080fd5b5061021061020b366004610fe9565b610546565b005b34801561021e57600080fd5b5061022860075481565b6040519081526020016101e7565b34801561024257600080fd5b5061021061025136600461100b565b610554565b34801561026257600080fd5b50610276610271366004611037565b61066a565b6040516001600160a01b0390911681526020016101e7565b34801561029a57600080fd5b506102286102a9366004610fe9565b600b6020526000908152604090205481565b3480156102c757600080fd5b50610228600c5481565b3480156102dd57600080fd5b506101db6102ec366004610fe9565b6000546001600160a01b0391821691161490565b34801561030c57600080fd5b50600154610276906001600160a01b031681565b610210610694565b34801561033457600080fd5b50610210610343366004611037565b610707565b34801561035457600080fd5b5061021061036336600461100b565b610819565b34801561037457600080fd5b50610210610827565b34801561038957600080fd5b50610210610952565b34801561039e57600080fd5b5061022860065481565b3480156103b457600080fd5b506103bd610966565b6040516101e79190611074565b3480156103d657600080fd5b5061022860045481565b3480156103ec57600080fd5b506000546001600160a01b0316610276565b34801561040a57600080fd5b5061022860025481565b34801561042057600080fd5b5061021061042f366004611037565b6109d8565b34801561044057600080fd5b506101db61044f366004610fe9565b610aa1565b34801561046057600080fd5b5061022860095481565b34801561047657600080fd5b5060055460ff16156101db565b34801561048f57600080fd5b5061022860035481565b3480156104a557600080fd5b506102106104b436600461100b565b610aca565b3480156104c557600080fd5b506005546101db9060ff1681565b3480156104df57600080fd5b50600a54610276906001600160a01b031681565b3480156104ff57600080fd5b5061022861050e366004610fe9565b610bd5565b34801561051f57600080fd5b5061021061052e366004610fe9565b610c44565b600061054160075442101590565b905090565b610551600182610cba565b50565b60015460405163079cc67960e41b81526001600160a01b03838116600483015260248201859052909116906379cc679090604401600060405180830381600087803b1580156105a257600080fd5b505af11580156105b6573d6000803e3d6000fd5b5050505060006105c583610ed1565b90506000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114610614576040519150601f19603f3d011682016040523d82523d6000602084013e610619565b606091505b50509050806106645760405162461bcd60e51b81526020600482015260126024820152710ccc2d2d8cac840e8de40e6cadcc840cae8d60731b60448201526064015b60405180910390fd5b50505050565b6008818154811061067a57600080fd5b6000918252602090912001546001600160a01b0316905081565b600061069f34610ee1565b6001546040516340c10f1960e01b8152336004820152602481018390529192506001600160a01b0316906340c10f1990604401600060405180830381600087803b1580156106ec57600080fd5b505af1158015610700573d6000803e3d6000fd5b5050505050565b61070f610ef1565b600c548111156107615760405162461bcd60e51b815260206004820152601960248201527f4e6f7420656e6f756768206665657320636f6c6c656374656400000000000000604482015260640161065b565b80600c600082825461077391906110bd565b909155506000905061078482610ed1565b604051909150600090339083908381818185875af1925050503d80600081146107c9576040519150601f19603f3d011682016040523d82523d6000602084013e6107ce565b606091505b50509050806108145760405162461bcd60e51b81526020600482015260126024820152710ccc2d2d8cac840e8de40e6cadcc840cae8d60731b604482015260640161065b565b505050565b6108238282610cba565b5050565b6007544210156108705760405162461bcd60e51b81526020600482015260146024820152734c6f7474657279207374696c6c2061637469766560601b604482015260640161065b565b60055460ff166108b35760405162461bcd60e51b815260206004820152600e60248201526d185b1c9958591e4818db1bdcd95960921b604482015260640161065b565b60085415610946576008546000906108cb90446110e6565b9050600881815481106108e0576108e06110fa565b6000918252602080832090910154600a80546001600160a01b0319166001600160a01b039092169182179055600654908352600b9091526040822080549192909161092c908490611110565b90915550506000600681905561094490600890610f9b565b505b6005805460ff19169055565b61095a610ef1565b6109646000610f4b565b565b600154604080516395d89b4160e01b815290516060926001600160a01b0316916395d89b419160048083019260009291908290030181865afa1580156109b0573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526105419190810190611139565b6109e0610ef1565b60055460ff1615610a255760405162461bcd60e51b815260206004820152600f60248201526e2637ba3a32b93c9034b99037b832b760891b604482015260640161065b565b428111610a7f5760405162461bcd60e51b815260206004820152602260248201527f436c6f73696e672074696d65206d75737420626520696e207468652066757475604482015261726560f01b606482015260840161065b565b6007556005805460ff19166001179055600a80546001600160a01b0319169055565b60055460009060ff16158015610ac45750600a546001600160a01b038381169116145b92915050565b6001600160a01b0381166000908152600b60205260409020548210610b315760405162461bcd60e51b815260206004820152601f60248201527f446f206e6f74206861766520656e6f756768207072697a6520746f6b656e7300604482015260640161065b565b6001600160a01b0381166000908152600b602052604081208054849290610b599084906110bd565b909155505060015460405163a9059cbb60e01b81526001600160a01b038381166004830152602482018590529091169063a9059cbb906044016020604051808303816000875af1158015610bb1573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061081491906111e6565b6001546040516370a0823160e01b81526001600160a01b03838116600483015260009216906370a0823190602401602060405180830381865afa158015610c20573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ac49190611208565b610c4c610ef1565b6001600160a01b038116610cb15760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161065b565b61055181610f4b565b60008211610cc757600080fd5b6000600454600354610cd99190611110565b610ce39084611221565b6001546040516370a0823160e01b81526001600160a01b038581166004830152929350600092909116906370a0823190602401602060405180830381865afa158015610d33573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d579190611208565b905081811015610da95760405162461bcd60e51b815260206004820152601d60248201527f596f7520646f206e6f74206861766520656e6f75676820746f6b656e73000000604482015260640161065b565b8315610e0c57600880546001810182556000919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30180546001600160a01b0319166001600160a01b03851617905583610e0481611238565b945050610da9565b83600354610e1a9190611221565b60066000828254610e2b9190611110565b9091555050600454610e3e908590611221565b600c6000828254610e4f9190611110565b90915550506001546040516323b872dd60e01b81526001600160a01b03858116600483015230602483015260448201859052909116906323b872dd906064016020604051808303816000875af1158015610ead573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061070091906111e6565b600060025482610ac4919061124f565b600060025482610ac49190611221565b6000546001600160a01b031633146109645760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161065b565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b508054600082559060005260206000209081019061055191905b80821115610fc95760008155600101610fb5565b5090565b80356001600160a01b0381168114610fe457600080fd5b919050565b600060208284031215610ffb57600080fd5b61100482610fcd565b9392505050565b6000806040838503121561101e57600080fd5b8235915061102e60208401610fcd565b90509250929050565b60006020828403121561104957600080fd5b5035919050565b60005b8381101561106b578181015183820152602001611053565b50506000910152565b6020815260008251806020840152611093816040850160208701611050565b601f01601f19169190910160400192915050565b634e487b7160e01b600052601160045260246000fd5b81810381811115610ac457610ac46110a7565b634e487b7160e01b600052601260045260246000fd5b6000826110f5576110f56110d0565b500690565b634e487b7160e01b600052603260045260246000fd5b80820180821115610ac457610ac46110a7565b634e487b7160e01b600052604160045260246000fd5b60006020828403121561114b57600080fd5b815167ffffffffffffffff8082111561116357600080fd5b818401915084601f83011261117757600080fd5b81518181111561118957611189611123565b604051601f8201601f19908116603f011681019083821181831017156111b1576111b1611123565b816040528281528760208487010111156111ca57600080fd5b6111db836020830160208801611050565b979650505050505050565b6000602082840312156111f857600080fd5b8151801515811461100457600080fd5b60006020828403121561121a57600080fd5b5051919050565b8082028115828204841417610ac457610ac46110a7565b600081611247576112476110a7565b506000190190565b60008261125e5761125e6110d0565b50049056fea2646970667358221220410077554b9b065585edd20a96bb7691a7bfa9a652075678a301322057b7896f64736f6c63430008180033",
  "devdoc": {
    "custom:teaching": "This is a contract meant for teaching only",
    "details": "This contract implements a relatively weak randomness source, since there is no cliff period between the randao reveal and the actual usage in this contract",
    "kind": "dev",
    "methods": {
      "closeLottery()": {
        "details": "Anyone can call this function at any time after the closing time"
      },
      "constructor": {
        "params": {
          "_betFee": "Amount of tokens required for placing a bet that goes for the owner pool",
          "_betPrice": "Amount of tokens required for placing a bet that goes for the prize pool",
          "_purchaseRatio": "Amount of tokens given per ETH paid",
          "_tokenName": "Name of the token used for payment",
          "_tokenSymbol": "Symbol of the token used for payment"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "purchaseTokens()": {
        "details": "This implementation is prone to rounding problems"
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "A very simple lottery contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "bet(address)": {
        "notice": "Charges the bet price and creates a new bet slot with the sender's address"
      },
      "betFee()": {
        "notice": "Amount of tokens required for placing a bet that goes for the owner pool"
      },
      "betMany(uint256,address)": {
        "notice": "Calls the bet function `times` times"
      },
      "betPrice()": {
        "notice": "Amount of tokens required for placing a bet that goes for the prize pool"
      },
      "closeLottery()": {
        "notice": "Closes the lottery and calculates the prize, if any"
      },
      "constructor": {
        "notice": "Constructor function"
      },
      "openBets(uint256)": {
        "notice": "Opens the lottery for receiving bets"
      },
      "ownerWithdraw(uint256)": {
        "notice": "Withdraws `amount` from the owner's pool"
      },
      "paymentToken()": {
        "notice": "Address of the token used as payment for the bets"
      },
      "prizeWithdraw(uint256,address)": {
        "notice": "Withdraws `amount` from that accounts's prize pool"
      },
      "purchaseRatio()": {
        "notice": "Amount of tokens given per ETH paid"
      },
      "purchaseTokens()": {
        "notice": "Gives tokens based on the amount of ETH sent and the purchase ratio"
      },
      "returnTokens(uint256,address)": {
        "notice": "Burns `amount` tokens and give the equivalent ETH back to user"
      }
    },
    "notice": "You can use this contract for running a very simple lottery",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 396,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2506,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "paymentToken",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(LotteryToken)3092"
      },
      {
        "astId": 2509,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "purchaseRatio",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 2512,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "betPrice",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 2515,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "betFee",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 2517,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "betsOpen",
        "offset": 0,
        "slot": "5",
        "type": "t_bool"
      },
      {
        "astId": 2519,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "prizePool",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 2521,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "betsClosingTime",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 2524,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "_slots",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 2526,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "betFees",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 2528,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "winner",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 2532,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "prizeAmount",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2534,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "ownerPool",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(LotteryToken)3092": {
        "encoding": "inplace",
        "label": "contract LotteryToken",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}